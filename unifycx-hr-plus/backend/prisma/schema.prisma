// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses a pgbouncer-ready URL
}

// ----------------------------------------
// ENUMS
// ----------------------------------------

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentStatus {
  PROBATION
  ACTIVE
  NOTICE_PERIOD
  RESIGNED
  TERMINATED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ShiftType {
  DAY
  NIGHT
  SPLIT
  FLEX
}

enum NotificationStatus {
  UNREAD
  READ
}

// ----------------------------------------
// CORE HR TABLES
// ----------------------------------------

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  employees   Employee[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  employees Employee[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("departments")
}

model Employee {
  id                  Int       @id @default(autoincrement())
  employeeId          String    @unique @map("employee_id")
  firstName           String    @map("first_name")
  lastName            String    @map("last_name")
  email               String    @unique
  password            String
  jobTitle            String    @map("job_title")
  hireDate            DateTime  @map("hire_date")
  employmentStatus    EmploymentStatus @default(PROBATION) @map("employment_status")
  personalEmail       String?   @unique @map("personal_email")
  phone               String?
  dob                 DateTime? @map("date_of_birth")
  gender              Gender?
  address             Json?
  bankDetails         Json?     @map("bank_details")
  complianceDetails   Json?     @map("compliance_details")
  country             String?   // e.g., 'IN', 'US', 'PH'
  timezone            String?   // e.g., 'Asia/Kolkata'

  departmentId        Int?      @map("department_id")
  roleId              Int       @map("role_id")
  managerId           Int?      @map("manager_id")

  department          Department? @relation(fields: [departmentId], references: [id])
  role                Role        @relation(fields: [roleId], references: [id])
  manager             Employee?   @relation("TeamHierarchy", fields: [managerId], references: [id])
  reports             Employee[]  @relation("TeamHierarchy")

  attendances         Attendance[]
  leaveRequests       LeaveRequest[] @relation("EmployeeLeaveRequests")
  approvedLeaves      LeaveRequest[] @relation("ApproverLeaveRequests")
  shifts              EmployeeShift[]
  payrolls            Payroll[]
  performanceReviews  PerformanceReview[] @relation("EmployeeReviews")
  managerReviews      PerformanceReview[] @relation("ManagerReviews")
  qaReviews           QAReview[]
  coachingSessions    CoachingSession[] @relation("EmployeeCoaching")
  coachOfSessions     CoachingSession[] @relation("CoachCoaching")
  trainingProgress    TrainingProgress[]
  documents           Document[]
  notifications       Notification[]
  auditLogs           AuditLog[]

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  @@map("employees")
}


// ----------------------------------------
// MODULES
// ----------------------------------------

model Attendance {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  clockIn         DateTime  @map("clock_in")
  clockOut        DateTime? @map("clock_out")
  durationHours   Float?    @map("duration_hours")
  ipAddress       String?   @map("ip_address")
  gpsCoordinates  Json?     @map("gps_coordinates")
  isLate          Boolean   @default(false) @map("is_late")
  status          String // e.g., Present, Half-Day, Absent

  employee        Employee  @relation(fields: [employeeId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("attendance")
}

model EmployeeShift {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  shiftDate       DateTime  @map("shift_date")
  shiftType       ShiftType @map("shift_type")
  startTime       DateTime  @map("start_time")
  endTime         DateTime  @map("end_time")
  
  employee        Employee  @relation(fields: [employeeId], references: [id])
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("employee_shifts")
}

model LeaveType {
  id              Int       @id @default(autoincrement())
  name            String
  daysAllowed     Int       @map("days_allowed")
  country         String    // e.g., 'IN', 'US', 'PH'
  carryForward    Boolean   @default(false) @map("carry_forward")
  encashment      Boolean   @default(false)

  leaveRequests   LeaveRequest[]
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("leave_types")
}

model LeaveRequest {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  leaveTypeId     Int       @map("leave_type_id")
  startDate       DateTime  @map("start_date")
  endDate         DateTime  @map("end_date")
  reason          String?
  status          LeaveStatus @default(PENDING)
  approvedById    Int?      @map("approved_by_id")

  employee        Employee    @relation("EmployeeLeaveRequests", fields: [employeeId], references: [id])
  leaveType       LeaveType   @relation(fields: [leaveTypeId], references: [id])
  approver        Employee?   @relation("ApproverLeaveRequests", fields: [approvedById], references: [id])

  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("leave_requests")
}

model Payroll {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  payPeriodStart  DateTime  @map("pay_period_start")
  payPeriodEnd    DateTime  @map("pay_period_end")
  grossSalary     Float     @map("gross_salary")
  netSalary       Float     @map("net_salary")
  deductions      Json?
  overtime        Json?
  payslipUrl      String?   @map("payslip_url")

  employee        Employee  @relation(fields: [employeeId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("payrolls")
}

model PerformanceReview {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  managerId       Int       @map("manager_id")
  reviewPeriod    String    @map("review_period") // e.g., "Q3 2024"
  kpiData         Json?     @map("kpi_data")
  selfFeedback    String?   @map("self_feedback")
  managerFeedback String?   @map("manager_feedback")
  finalRating     Float?    @map("final_rating")

  employee        Employee  @relation("EmployeeReviews", fields: [employeeId], references: [id])
  manager         Employee  @relation("ManagerReviews", fields: [managerId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("performance_reviews")
}

model QAForm {
  id              Int        @id @default(autoincrement())
  name            String
  structure       Json       // Defines sections, questions, and scores
  reviews         QAReview[]

  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  @@map("qa_forms")
}

model QAReview {
  id              Int       @id @default(autoincrement())
  agentId         Int       @map("agent_id")
  qaFormId        Int       @map("qa_form_id")
  interactionId   String    @map("interaction_id") // Call or chat ID
  score           Float
  feedback        String?
  reviewData      Json      // The filled out form data

  agent           Employee  @relation(fields: [agentId], references: [id])
  qaForm          QAForm    @relation(fields: [qaFormId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("qa_reviews")
}

model CoachingSession {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  coachId         Int       @map("coach_id")
  sessionDate     DateTime  @map("session_date")
  notes           String?
  actionItems     Json?     @map("action_items")
  effectiveness   Float?    // Score of effectiveness

  employee        Employee  @relation("EmployeeCoaching", fields: [employeeId], references: [id])
  coach           Employee  @relation("CoachCoaching", fields: [coachId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("coaching_sessions")
}

model TrainingModule {
  id              Int                @id @default(autoincrement())
  title           String
  description     String?
  content         Json               // Could be links to videos, docs, quiz structure
  duration        Int                // in minutes
  
  progress        TrainingProgress[]

  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  @@map("training_modules")
}

model TrainingProgress {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  moduleId        Int       @map("module_id")
  status          String    // e.g., 'Not Started', 'In Progress', 'Completed'
  progress        Int       @default(0) // Percentage
  score           Float?
  
  employee        Employee        @relation(fields: [employeeId], references: [id])
  trainingModule  TrainingModule  @relation(fields: [moduleId], references: [id])

  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  @@unique([employeeId, moduleId])
  @@map("training_progress")
}

model Document {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @map("employee_id")
  documentType    String    @map("document_type") // e.g., 'PAN', 'Aadhaar', 'Contract'
  documentUrl     String    @map("document_url")
  expiryDate      DateTime? @map("expiry_date")
  
  employee        Employee  @relation(fields: [employeeId], references: [id])

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("documents")
}

model Notification {
  id              Int                @id @default(autoincrement())
  employeeId      Int                @map("employee_id")
  message         String
  url             String?
  status          NotificationStatus @default(UNREAD)

  employee        Employee           @relation(fields: [employeeId], references: [id])

  createdAt       DateTime           @default(now()) @map("created_at")

  @@map("notifications")
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  actorId         Int      @map("actor_id")
  action          String
  entity          String   // e.g., 'Employee', 'LeaveRequest'
  entityId        Int      @map("entity_id")
  details         Json?

  actor           Employee @relation(fields: [actorId], references: [id])
  
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}
