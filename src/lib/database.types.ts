/**
 * This file was auto-generated by Supabase.
 * Do not edit this file directly.
 * 
 * When you next run the Supabase CLI, this file will be automatically regenerated.
 * For this prototype, we are defining the types manually based on the mock data.
 */

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      departments: {
        Row: {
          id: string
          name: string
          created_at: string
        }
        Insert: {
          id?: string
          name: string
          created_at?: string
        }
        Update: {
          id?: string
          name?: string
          created_at?: string
        }
      }
      employees: {
        Row: {
          id: string
          user_id: string
          full_name: string
          job_title: string
          employee_id: string
          department_id: string
          phone_number: string | null
          profile_picture_url: string | null
          status: "Active" | "Inactive"
          created_at: string
        }
        Insert: {
          id?: string
          user_id: string
          full_name: string
          job_title: string
          employee_id: string
          department_id: string
          phone_number?: string | null
          profile_picture_url?: string | null
          status?: "Active" | "Inactive"
          created_at?: string
        }
        Update: {
          id?: string
          user_id?: string
          full_name?: string
          job_title?: string
          employee_id?: string
          department_id?: string
          phone_number?: string | null
          profile_picture_url?: string | null
          status?: "Active" | "Inactive"
          created_at?: string
        }
      }
      users: {
        Row: {
          id: string
          email: string
          role: "admin" | "employee" | "hr" | "manager" | "recruiter" | "qa-analyst" | "process-manager" | "team-leader" | "marketing" | "finance" | "it-manager" | "operations-manager" | "account-manager" | "trainer" | "trainee"
          created_at: string
        }
        Insert: {
          id: string // From auth.users.id
          email: string
          role?: "admin" | "employee" | "hr" | "manager" | "recruiter" | "qa-analyst" | "process-manager" | "team-leader" | "marketing" | "finance" | "it-manager" | "operations-manager" | "account-manager" | "trainer" | "trainee"
          created_at?: string
        }
        Update: {
          id?: string
          email?: string
          role?: "admin" | "employee" | "hr" | "manager" | "recruiter" | "qa-analyst" | "process-manager" | "team-leader" | "marketing" | "finance" | "it-manager" | "operations-manager" | "account-manager" | "trainer" | "trainee"
          created_at?: string
        }
      }
      leave_requests: {
        Row: {
            id: string
            employee_id: string
            leave_type: "Sick Leave" | "Casual Leave" | "Paid Time Off" | "Work From Home"
            start_date: string
            end_date: string
            days: number
            status: "Pending" | "Approved" | "Rejected"
            reason: string
            created_at: string
        }
        Insert: {
            id?: string
            employee_id: string
            leave_type: "Sick Leave" | "Casual Leave" | "Paid Time Off" | "Work From Home"
            start_date: string
            end_date: string
            days: number
            status?: "Pending" | "Approved" | "Rejected"
            reason: string
            created_at?: string
        }
        Update: {
            id?: string
            employee_id?: string
            leave_type?: "Sick Leave" | "Casual Leave" | "Paid Time Off" | "Work From Home"
            start_date?: string
            end_date?: string
            days?: number
            status?: "Pending" | "Approved" | "Rejected"
            reason?: string
            created_at?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}
