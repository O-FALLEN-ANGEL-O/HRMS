
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { predictCareerPathAction } from './actions';
import type { PredictCareerPathOutput } from '@/ai/flows/predict-career-path';
import { Bot, Loader2, Send, BrainCircuit, TrendingUp, Sparkles, Zap } from 'lucide-react';

export default function CareerPredictorPage() {
  const [result, setResult] = useState<PredictCareerPathOutput | null>(null);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true);
    setResult(null);

    const formData = new FormData(event.currentTarget);
    const input = {
      currentRole: formData.get('currentRole') as string,
      skills: (formData.get('skills') as string).split(',').map(s => s.trim()),
      performanceSummary: formData.get('performanceSummary') as string,
    };

    try {
      const response = await predictCareerPathAction(input);
      setResult(response);
      toast({
        title: "Career Path Generated",
        description: "The potential career path has been generated by AI.",
      });
    } catch (e) {
      console.error(e);
      toast({
        title: "Prediction Failed",
        description: "There was an error generating the career path.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold font-headline">AI Career Path Predictor</h1>
        <p className="text-muted-foreground">
          Forecast potential career growth for an employee based on their current profile.
        </p>
      </div>
      <Card>
        <CardContent className="grid md:grid-cols-2 gap-8 p-6">
          <form onSubmit={handleSubmit} className="space-y-4">
             <CardHeader className="p-0 mb-4">
                <CardTitle className="flex items-center gap-2 font-headline">
                    <Zap /> Employee Input
                </CardTitle>
                <CardDescription>
                    Provide the employee's current data to generate a prediction.
                </CardDescription>
            </CardHeader>
            <div className="space-y-1">
              <Label htmlFor="currentRole">Current Role</Label>
              <Input id="currentRole" name="currentRole" defaultValue="Software Engineer" required />
            </div>
            <div className="space-y-1">
              <Label htmlFor="skills">Key Skills (comma-separated)</Label>
              <Input id="skills" name="skills" defaultValue="React, TypeScript, Node.js, Project Management" required />
            </div>
            <div className="space-y-1">
              <Label htmlFor="performanceSummary">Latest Performance Summary</Label>
              <Textarea id="performanceSummary" name="performanceSummary" placeholder="e.g., Exceeded expectations, demonstrated strong leadership on the 'Phoenix' project..." required rows={5}/>
            </div>
            <Button type="submit" disabled={loading} className="w-full">
              {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {loading ? 'Analyzing...' : 'Predict Career Path'}
            </Button>
          </form>

          <div className="rounded-lg border bg-muted/30 p-4 space-y-4 h-full flex flex-col">
            <h3 className="text-lg font-semibold flex items-center gap-2"><BrainCircuit /> Predicted Path (5-7 Years)</h3>
            {loading && (
                <div className="flex flex-col items-center justify-center flex-grow">
                    <Loader2 className="mr-4 h-8 w-8 animate-spin" />
                    <p className="mt-2 text-muted-foreground">AI is analyzing potential career trajectories...</p>
                </div>
            )}
            
            {!loading && !result && (
              <div className="flex items-center justify-center flex-grow text-muted-foreground text-center">
                <p>The predicted career path will be displayed here.</p>
              </div>
            )}

            {result && (
              <div className="space-y-6 flex-grow overflow-y-auto">
                {result.path.map((step, index) => (
                   <div key={index} className="relative pl-6">
                        <div className="absolute -left-0 top-1 w-4 h-4 bg-primary rounded-full z-10 border-4 border-background" />
                        <div className="absolute -left-[1px] top-1 h-full w-0.5 bg-border" />

                        <p className="font-bold text-primary">{step.timespan}</p>
                        <h4 className="font-semibold text-lg">{step.role}</h4>
                        <p className="text-sm text-muted-foreground mt-1">{step.rationale}</p>
                        
                        <div className="mt-2">
                            <h5 className="text-xs font-semibold text-muted-foreground">SKILLS TO DEVELOP</h5>
                            <div className="flex flex-wrap gap-1 mt-1">
                                {step.skills_to_develop.map(skill => <Badge variant="secondary" key={skill}>{skill}</Badge>)}
                            </div>
                        </div>
                   </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
